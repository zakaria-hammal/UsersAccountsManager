@page "/ChangeInfos"
@inject HttpClient Http
@inject NavigationManager navigationManager
@inject AuthenticationStateProvider AuthStateProvider

<PageTitle>Reset Info</PageTitle>

<CascadingAuthenticationState>
    <AuthorizeView>
        <Authorized>
            <label>New Userame : </label>
            <input type="text" placeholder="New Password" @bind="model.NewUsername"><br><br>
            <label>New Email : </label>
            <input type="text" placeholder="New Password" @bind="model.NewEmail"><br><br>
            <label>Two-Factor Authentication : </label>
            <input type="checkbox" @bind="@model.Two_Factor_Auth"><br><br>
            <button class="btn btn-primary" @onclick="@Reset">Change Infos</button>

        </Authorized>
    </AuthorizeView>
</CascadingAuthenticationState>

@code {
    private ChangeInfo model {get; set;} = new();

    private bool isLogged{get; set;} = false;

    protected override async Task OnInitializedAsync() 
    {
        await base.OnInitializedAsync();
        Http.DefaultRequestHeaders.Accept.Clear();
        Http.DefaultRequestHeaders.Accept.Add(new MediaTypeWithQualityHeaderValue("application/json"));
        
        var state = await AuthStateProvider.GetAuthenticationStateAsync();

        var user = state.User.FindFirst(c => c.Type.Contains("given"))?.Value;

        UserModel? current;

        var Users = await Http.GetFromJsonAsync<List<UserModel>>("api/User/GetAllUsers");
        if(Users != null)
        {
            current = Users.FirstOrDefault(u => u.UserName == user);
            if(current != null)
            {
                var email = state.User.FindFirst(c => c.Type.Contains("email"))?.Value;

                model.CurrentUsername = user;
                model.CurrentEmail = email;
                model.Two_Factor_Auth = current.Two_Factor_Auth;
            }
        }
        
    }

    private async Task Reset()
    {
            
        var response = await Http.PostAsJsonAsync("api/Account/updateUser", model);

        if (response.IsSuccessStatusCode)
        {
            navigationManager.NavigateTo("/", forceLoad: true);
        }
        
    }
} 
