@page "/Users"
@inject HttpClient Http
@inject NavigationManager navigationManager
@inject AuthenticationStateProvider AuthStateProvider
@inject ILocalStorageService localStorage

@attribute [Authorize(Policy = "Can_View_User")]

<PageTitle>Users</PageTitle>
<style>
    button {border-radius: 5px;}
</style>

<h1>Users</h1>
<CascadingAuthenticationState>
    <AuthorizeView Policy="Can_Add_User">
        <button class="btn btn-primary" @onclick="nav">Add User</button>
    </AuthorizeView>
</CascadingAuthenticationState>
<CascadingAuthenticationState>
    <AuthorizeView Policy="Can_Add_Admin">
    <button class="btn btn-primary" @onclick="navAd">Add Admin</button>
</AuthorizeView>
</CascadingAuthenticationState>
@if (Users == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Userame</th>
                <th>Email</th>
                <th>Role</th>
                <th>View Profile</th>
                @if(role != "Superuser")
                {
                    <th>Contact</th>
                }
                <CascadingAuthenticationState>
                    <AuthorizeView Policy="Can_DeleteOrLock_User" Context="Del">
                        <th></th>
                    </AuthorizeView>
                </CascadingAuthenticationState>
            </tr>
        </thead>
        <tbody>
            @foreach (var user in Users)
            {
                <tr>
                    <td>@user.UserName</td>
                    <td>@user.Email</td>
                    <td>@user.Role</td>
                    <td><a href="/Users/@user.UserName" style="text-decoration: none;">@user.UserName</a></td>
                    @if(role != "Superuser")
                    {
                        @if(me == user.UserName || user.Role == "Client")
                        {
                            <td><button disabled>Contact</button></td>
                        }
                        else
                        {
                            <td><button @onclick="() => ToChat(user.UserName)">Contact</button></td>
                        }
                    }
                    <CascadingAuthenticationState>
                        <AuthorizeView Policy="Can_DeleteOrLock_User" Context="another">
                            @if(user.Role != "Admin" && user.Role != "Superuser")
                            {
                                <td><button @onclick="() => DeleteUserAsync(user.UserName)">Delete</button></td>
                            }
                            else if(user.Role == "Admin")
                            {
                                <CascadingAuthenticationState>
                                    <AuthorizeView Policy="Can_Delete_Admin" Context="Other">
                                        <Authorized>
                                            <td><button @onclick="() => DeleteAdminAsync(user.UserName)">Delete</button></td>
                                        </Authorized>
                                        <NotAuthorized>
                                            <td><button disabled>Delete</button></td>
                                        </NotAuthorized>
                                    </AuthorizeView>
                                </CascadingAuthenticationState>
                            }
                            else
                            {
                                <td><button disabled>Delete</button></td>
                            }
                        </AuthorizeView>
                    </CascadingAuthenticationState>

                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<UserModel>? Users{get; set;}
    private HubConnection? hubConnection;
    private bool add{get; set;} = false;

    private string? role {get; set;} = "";
    private string? me {get; set;} = "";

    protected override async Task OnInitializedAsync() 
    {
        await base.OnInitializedAsync();

        hubConnection = new HubConnectionBuilder()
            .WithUrl("http://localhost:5250/chathub")
            .Build();
    
        await hubConnection.StartAsync();

        Http.DefaultRequestHeaders.Accept.Clear();
        Http.DefaultRequestHeaders.Accept.Add(new MediaTypeWithQualityHeaderValue("application/json"));
        
        var state =  await AuthStateProvider.GetAuthenticationStateAsync();

        role = state.User.FindFirst(c => c.Type.Contains("role"))?.Value;
        me = state.User.FindFirst(c => c.Type.Contains("given"))?.Value;

        var response = await Http.GetAsync("api/User/GetAllUsers");
        
        Users = new();
        
        if (response.IsSuccessStatusCode)
        {
            Users = await Http.GetFromJsonAsync<List<UserModel>>("api/User/GetAllUsers");

            if(role != "Superuser")
            {
                Users = Users.Where(u => u.Role != "Superuser").ToList();
            }
            
        }
    }

    private void nav()
    {
        navigationManager.NavigateTo("AddUser", forceLoad:true);
    }

    private void navAd()
    {
        navigationManager.NavigateTo("AddAdmin", forceLoad:true);
    }

    private void ToChat(string user)
    {
        navigationManager.NavigateTo($"chat/{user}", forceLoad:true);
    }

    private async Task DeleteUserAsync(string user)
    {  

        await hubConnection.SendAsync("ChangeMessage", me, user, "You are out");
        var response = await Http.PostAsJsonAsync("api/Admin/DeleteUser", user);

        if (response.IsSuccessStatusCode)
        {
            navigationManager.NavigateTo("/Users", forceLoad:true);
        }
    
    }

    private async Task DeleteAdminAsync(string user)
    {  
        await hubConnection.InvokeAsync("ChangeMessage", me, user, "You are out");
        var response = await Http.PostAsJsonAsync("api/Init/DeleteUser", user);

        if (response.IsSuccessStatusCode)
        {
            navigationManager.NavigateTo("/Users", forceLoad:true);
        }
    }
    
}